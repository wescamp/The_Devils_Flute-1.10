#version 2.2
#last modification: 29.08.11

#define INVERT_DIRECTIONS DIRECTIONS OUT_VAR
   #a macro to change directions to their opposites (n->s, sw->ne, etc)
   #DIRECTIONS is a comma-separated list of directions
   #OUT_VAR is the variable to write the output in.

[set_variables]
   name=TMP_inverted_directions
   [split]
      list={DIRECTIONS}
      separator=","
      key=direction
      remove_empty=yes
   [/split]
[/set_variables]

{FOREACH TMP_inverted_directions TMP_ID_i}
        [set_variable]
                name=TMP_inverted_directions[$TMP_ID_i].direction
                value="-" + $TMP_inverted_directions[$TMP_ID_i].direction
        [/set_variable]
{NEXT TMP_ID_i}

{CLEAR_VARIABLE {OUT_VAR}}

[set_variable]
	name={OUT_VAR}
	[join]
		variable=TMP_inverted_directions
		separator=","
		key=direction
	[/join]
[/set_variable]

{CLEAR_VARIABLE TMP_inverted_directions}
#enddef

#define STORE_FLOODABLE_LOCATIONS SOURCE DIRECTIONS TERRAINS OUT_VAR
   #stores hexes of type TERRAINS whose neighbour in one of DIRECTIONS directions can be found in SOURCE
   #SOURCE is an array of locations
   #DIRECTIONS is a list of directions
   #TERRAINS comma-separated list of terrain codes
   #OUT_VAR the variable to write the output in
   #
   #NOTE: this macro is in fact used to store the hexes of type TERRAINS which are neighbours of SOURCE in
   #certain directions, but we achieve that by inverting those directions outside of this macro. See INVERT_DIRECTIONS.

[store_locations]
   variable={OUT_VAR}

   terrain={TERRAINS}

   [filter_adjacent_location]
      adjacent={DIRECTIONS}
	  find_in={SOURCE}
   [/filter_adjacent_location]
[/store_locations]
#enddef


#define SPLIT_PAIRS PAIRS SEP1 SEP2 OUT_VAR
[set_variables]
   name=TMP_pairs
   [split]
      list={PAIRS}
      key=pair
      separator={SEP1}
      remove_empty=true
   [/split]
[/set_variables]

{FOREACH TMP_pairs TMP_SP_i}
   [set_variables]
      name=TMP_splitted
      [split]
         list=$TMP_pairs[$TMP_SP_i].pair
         separator={SEP2}
         key=value
      [/split]
   [/set_variables]

   [set_variable]
      name={OUT_VAR}[$TMP_SP_i].value1
      value=$TMP_splitted[0].value
   [/set_variable]
   [set_variable]
      name={OUT_VAR}[$TMP_SP_i].value2
      value=$TMP_splitted[1].value
   [/set_variable]
{NEXT TMP_SP_i}

{CLEAR_VARIABLE TMP_pairs}
{CLEAR_VARIABLE TMP_splitted}
#enddef

#define FLOOD_SINGLE_HEX X Y TERRAIN_TABLE
[store_locations]
   variable=TMP_current_hex
   x={X}
   y={Y}
[/store_locations]

{FOREACH {TERRAIN_TABLE} FSH_i}
   [if]
      [variable]
         name=TMP_current_hex.terrain
         equals=${TERRAIN_TABLE}[$FSH_i].value1
      [/variable]
      [then]
         {MODIFY_TERRAIN ${TERRAIN_TABLE}[$FSH_i].value2 {X} {Y}}
         [set_variable]
            name=FSH_i
            value=${TERRAIN_TABLE}.length
         [/set_variable]
      [/then]
   [/if]
{NEXT FSH_i}


{CLEAR_VARIABLE TMP_current_hex}
#enddef

#define SET_FLOOD_TERRAIN_TABLE TERRAIN_TABLE DATA_VAR
{SPLIT_PAIRS {TERRAIN_TABLE} ";" ">" {DATA_VAR}.terrain_table}
[set_variable]
   name={DATA_VAR}.floodable_terrains
   [join]
      variable={DATA_VAR}.terrain_table
      separator=","
      key=value1
   [/join]
[/set_variable]
#enddef

#define SET_FLOOD_DIRECTIONS DIRECTIONS DATA_VAR
{INVERT_DIRECTIONS {DIRECTIONS} {DATA_VAR}.directions}
#enddef

#define SET_FLOOD_SOURCE SOURCE DATA_VAR
{SPLIT_PAIRS {SOURCE} ";" "," TMP_source_coordinates}
[set_variable]
   name=TMP_fields_x
   [join]
      variable=TMP_source_coordinates
      key=value1
      separator=","
   [/join]
[/set_variable]
[set_variable]
   name=TMP_fields_y
   [join]
      variable=TMP_source_coordinates
      key=value2
      separator=","
   [/join]
[/set_variable]

[store_locations]
	variable={DATA_VAR}.fields
	x=$TMP_fields_x
	y=$TMP_fields_y
[/store_locations]
#enddef

#define CREATE_FLOOD SOURCE DIRECTIONS TERRAIN_TABLE DATA_VAR
[clear_variable]
   name={DATA_VAR}
[/clear_variable]

{SET_FLOOD_SOURCE {SOURCE} {DATA_VAR}}
{SET_FLOOD_TERRAIN_TABLE {TERRAIN_TABLE} {DATA_VAR}}
{SET_FLOOD_DIRECTIONS {DIRECTIONS} {DATA_VAR}}
#enddef

#define SPREAD_FLOOD DATA_VAR
{STORE_FLOODABLE_LOCATIONS {DATA_VAR}.fields ${DATA_VAR}.directions ${DATA_VAR}.floodable_terrains {DATA_VAR}.fields}

{FOREACH {DATA_VAR}.fields TMP_SF_i}
   {FLOOD_SINGLE_HEX ${DATA_VAR}.fields[$TMP_SF_i].x ${DATA_VAR}.fields[$TMP_SF_i].y {DATA_VAR}.terrain_table}
{NEXT TMP_SF_i}
[redraw][/redraw]

[store_unit]
	variable=TMP_submerged_units
	[filter]
		[filter_location]
			find_in={DATA_VAR}.fields
		[/filter_location]
	[/filter]
[/store_unit]

{FOREACH TMP_submerged_units TMP_SF_i}
	[fire_event]
		[primary_unit]
			id=$TMP_submerged_units[$TMP_SF_i].id
		[/primary_unit]
		name=submerged
	[/fire_event]
{NEXT TMP_SF_i}

{CLEAR_VARIABLE TMP_submerged_units}
#enddef
